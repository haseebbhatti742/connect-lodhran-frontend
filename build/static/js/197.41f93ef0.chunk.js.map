{"version":3,"file":"static/js/197.41f93ef0.chunk.js","mappings":"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","sources":["views/staff/AllStaff.js"],"sourcesContent":["import Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Alert, Button } from '@mui/material';\r\nimport { THEME_COLOR_LIGHT } from 'utils/Constants';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport jwt from 'jwtservice/jwtService';\r\n\r\nconst columns = [\r\n    { id: 'fullname', label: 'Full Name', minWidth: 170 },\r\n    { id: 'email', label: '\\u00a0Email', minWidth: 100 },\r\n    {\r\n        id: 'cnic',\r\n        label: 'CNIC',\r\n        minWidth: 170,\r\n        align: 'left',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'mobile',\r\n        label: 'Mobile\\u00a0',\r\n        minWidth: 170,\r\n        align: 'left',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'address',\r\n        label: 'Address',\r\n        minWidth: 170,\r\n        align: 'left',\r\n        format: (value) => value.toFixed(2)\r\n    }\r\n];\r\n\r\nfunction createData(fullname, email, cnic, mobile, address) {\r\n    return { fullname, email, cnic, mobile, address };\r\n}\r\n\r\nconst deletePackage = (id) => {\r\n    console.log(id);\r\n};\r\n\r\nconst DeleteButton = ({ id }) => {\r\n    return (\r\n        <Button variant=\"contained\" color=\"error\" onClick={() => deletePackage(id)}>\r\n            Delete\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default function AllStaff() {\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        jwt.getAllStaffs()\r\n            .then((res) => {\r\n                setIsLoading(false);\r\n                let rowsData = [];\r\n                res?.data?.map((item) => rowsData.push(createData(item?.fullname, item?.email, item?.cnic, item?.mobile, item?.address)));\r\n                setRows(rowsData);\r\n            })\r\n            .catch((err) => {\r\n                setErrorMessage(err?.response?.data?.message);\r\n                setIsError(true);\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Paper sx={{ width: '100%', overflow: 'hidden', mt: 4 }}>\r\n            {isLoading && <h3>Loading...!</h3>}\r\n            {isError ? (\r\n                <Alert severity=\"error\">{errorMessage}</Alert>\r\n            ) : (\r\n                <>\r\n                    <TableContainer sx={{ maxHeight: 440 }}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                            key={column.id}\r\n                                            align={column.align}\r\n                                            style={{ minWidth: column.minWidth, backgroundColor: THEME_COLOR_LIGHT, color: 'white' }}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                            {columns.map((column) => {\r\n                                                const value = row[column.id];\r\n                                                return (\r\n                                                    <TableCell key={column.id} align={column.align}>\r\n                                                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={rows.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </>\r\n            )}\r\n        </Paper>\r\n    );\r\n}\r\n"],"names":["columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","AllStaff","page","setPage","useState","rowsPerPage","setRowsPerPage","rows","setRows","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","useEffect","jwt","then","res","rowsData","data","map","item","push","fullname","email","cnic","mobile","address","catch","err","response","message","sx","width","overflow","mt","severity","maxHeight","stickyHeader","column","style","backgroundColor","THEME_COLOR_LIGHT","color","slice","row","hover","role","tabIndex","code","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"sourceRoot":""}