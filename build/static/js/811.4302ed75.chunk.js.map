{"version":3,"file":"static/js/811.4302ed75.chunk.js","mappings":"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","sources":["views/entries/PendingEntries.js"],"sourcesContent":["import Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Alert, Button } from '@mui/material';\r\nimport { THEME_COLOR_LIGHT } from 'utils/Constants';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport jwt from 'jwtservice/jwtService';\r\nimport moment from 'moment';\r\nimport { getPaymentMethodNameByKey } from 'utils/Functions';\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst columns = [\r\n    { id: 'isp', label: 'Isp', minWidth: 170 },\r\n    { id: 'userId', label: '\\u00a0User Id', minWidth: 100 },\r\n    {\r\n        id: 'packageName',\r\n        label: 'Package',\r\n        minWidth: 170,\r\n        align: 'left',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'paymentMethod',\r\n        label: 'Payment Method\\u00a0',\r\n        minWidth: 170,\r\n        align: 'left',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'expiryDate',\r\n        label: 'Expiry Date',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toFixed(2)\r\n    },\r\n    {\r\n        id: 'action',\r\n        label: 'Action',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toFixed(2)\r\n    }\r\n];\r\n\r\nfunction createData(isp, userId, packageName, paymentMethod, expiryDate, action) {\r\n    return { isp, userId, packageName, paymentMethod, expiryDate, action };\r\n}\r\n\r\nexport default function PendingEntries() {\r\n    const navigate = useNavigate();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getEntry();\r\n    }, []);\r\n\r\n    const getEntry = () => {\r\n        setIsLoading(true);\r\n        jwt.getAllPendingEntries()\r\n            .then((res) => {\r\n                let rowsData = [];\r\n                res?.data?.map((item) =>\r\n                    rowsData.push(\r\n                        createData(\r\n                            item?.isp?.name,\r\n                            item?.userId,\r\n                            item?.package?.name,\r\n                            getPaymentMethodNameByKey(item?.paymentMethod),\r\n                            moment(item?.expiryDate).format('DD/MM/YYYY'),\r\n                            <CompletePaymentButton id={item?.id} />\r\n                        )\r\n                    )\r\n                );\r\n                setRows(rowsData);\r\n                setIsLoading(false);\r\n                setIsError(false);\r\n            })\r\n            .catch((err) => {\r\n                setErrorMessage(err?.response?.data?.message);\r\n                setIsError(true);\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n\r\n    const deletePackage = (id) => {\r\n        console.log(id);\r\n    };\r\n\r\n    const completePayment = (id) => {\r\n        navigate(`/dashboard/complete-payment/${id}`);\r\n    };\r\n\r\n    const DeleteButton = ({ id }) => {\r\n        return (\r\n            <Button variant=\"contained\" color=\"error\" onClick={() => deletePackage(id)}>\r\n                Delete\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    const CompletePaymentButton = ({ id }) => {\r\n        return (\r\n            <Button variant=\"contained\" color=\"warning\" onClick={() => completePayment(id)}>\r\n                Pay\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Paper sx={{ width: '100%', overflow: 'hidden', mt: 4 }}>\r\n            {isLoading && <h3>Loading...!</h3>}\r\n            {isError ? (\r\n                <Alert severity=\"error\">{errorMessage}</Alert>\r\n            ) : (\r\n                !isLoading && (\r\n                    <>\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {columns.map((column) => (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={column.align}\r\n                                                style={{ minWidth: column.minWidth, backgroundColor: THEME_COLOR_LIGHT, color: 'white' }}\r\n                                            >\r\n                                                {column.label}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                                {columns.map((column) => {\r\n                                                    const value = row[column.id];\r\n                                                    return (\r\n                                                        <TableCell key={column.id} align={column.align}>\r\n                                                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                })}\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 100]}\r\n                            component=\"div\"\r\n                            count={rows.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                    </>\r\n                )\r\n            )}\r\n        </Paper>\r\n    );\r\n}\r\n"],"names":["columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","PendingEntries","navigate","useNavigate","page","setPage","useState","rowsPerPage","setRowsPerPage","rows","setRows","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","useEffect","getEntry","jwt","then","res","rowsData","data","map","item","isp","userId","packageName","paymentMethod","expiryDate","action","push","name","package","getPaymentMethodNameByKey","moment","CompletePaymentButton","catch","err","response","message","variant","color","onClick","completePayment","sx","width","overflow","mt","severity","maxHeight","stickyHeader","column","style","backgroundColor","THEME_COLOR_LIGHT","slice","row","hover","role","tabIndex","code","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"sourceRoot":""}